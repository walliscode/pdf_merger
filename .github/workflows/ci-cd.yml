name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  DOCKER_IMAGE_NAME: pdf-merger

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc poppler-utils
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: python3 test_pdf_merger.py
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        pip install --upgrade pip
        pip install flake8 pylint
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Lint with pylint
      run: |
        pylint *.py --exit-zero
      continue-on-error: true
  
  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build package
      run: python -m build
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/*
        retention-days: 30
  
  build-executable:
    name: Build Executable
    runs-on: ${{ matrix.os }}
    needs: [test, lint]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: pdf-merger-linux
            executable_path: dist/pdf-merger
          - os: windows-latest
            artifact_name: pdf-merger-windows
            executable_path: dist/pdf-merger.exe
          - os: macos-latest
            artifact_name: pdf-merger-macos
            executable_path: dist/pdf-merger
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --name pdf-merger --add-data "README.md:." cli.py
    
    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.executable_path }}
        retention-days: 30
  
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Docker image for artifact (PR only)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: ${{ env.DOCKER_IMAGE_NAME }}:test
        cache-from: type=gha
    
    - name: Save Docker image (PR only)
      if: github.event_name == 'pull_request'
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:test | gzip > docker-image.tar.gz
    
    - name: Upload Docker image artifact (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: docker-image.tar.gz
        retention-days: 7
